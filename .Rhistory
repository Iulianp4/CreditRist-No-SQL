if (names(dev.cur()) != "null device"){
dev.off()
}
grid.table(ndf)
}
# generare tabel contingent
get.contingency.table <- function(dep.var, indep.var,
stat.tests=F){
if(stat.tests == F){
CrossTable(dep.var, indep.var, digits=1,
prop.r=F, prop.t=F, prop.chisq=F)
}else{
CrossTable(dep.var, indep.var, digits=1,
prop.r=F, prop.t=F, prop.chisq=F,
chisq=T, fisher=T)
}
}
# vizualizare
# barcharts
visualize.barchart <- function(indep.var){
qplot(indep.var, geom="bar",
fill=I('gray'), col=I('black'),
xlab = deparse(substitute(indep.var))) + theme_bw()
}
# mosaic plots
visualize.contingency.table <- function(dep.var, indep.var){
if (names(dev.cur()) != "null device"){
dev.off()
}
mosaicplot(dep.var ~ indep.var, color=T,
main = "Contingency table plot")
}
## Analizarea dataset-ului
attach(credit.dataset)
get.categorical.variable.stats(credit.rating)
visualize.barchart(credit.rating)
get.categorical.variable.stats(account.balance)
visualize.barchart(account.balance)
library(car)
new.account.balance<- recode(account.balance,"1=1;2=2;3=3;4=3")
credit.dataset$account.balance<- new.account.balance
get.contingency.table(credit.rating,new.account.balance,
stat.tests = T)
visualize.contingency.table(credit.rating,new.account.balance)
get.numeric.variable.stats(credit.duration.months)
visualize.distribution(credit.duration.months)
visualize.boxplot(credit.duration.months,credit.rating)
get.categorical.variable.stats(previous.credit.payment.status)
visualize.barchart(previous.credit.payment.status)
new.previous.credit.payment.status<- recode(previous.credit.payment.status,
"0=1;1=1;2=2;3=3;4=3")
credit.dataset$previous.credit.payment.status<-
new.previous.credit.payment.status
get.contingency.table(credit.rating,new.previous.credit.payment.status)
get.categorical.variable.stats(credit.purpose)
visualize.barchart(credit.purpose)
new.credit.purpose <- recode(credit.purpose,
"0=4;1=1;2=2;3=3;4=3;5=3;6=3;7=4;8=4;9=4;10=4")
credit.dataset$credit.purpose<- new.credit.purpose
get.contingency.table(credit.rating,new.credit.purpose)
get.numeric.variable.stats(credit.amount)
visualize.distribution(credit.amount)
install.packages(c("pastecs", "gmodels", "gridExtra", "ggplot2", "car"))
install.packages(c("pastecs", "gmodels", "gridExtra", "ggplot2", "car"))
install.packages(c("pastecs", "gmodels", "gridExtra", "ggplot2", "car"))
credit.dataset <- read.csv("swiss_credit_dataset.csv", header=TRUE, sep = ",")
class(credit.dataset)
str(credit.dataset)
sum(is.na(credit.dataset))
# metodÄ pentru transformarea datelor
to.factors <- function(dataset, variables){
for (variable in variables){
dataset[[variable]] <- as.factor(dataset[[variable]])
}
return(dataset)
}
# selectarea datelor pe care vrem sÄ le transformÄm
categorical.vars <- c('credit.rating', 'account.balance', 'previous.credit.payment.status',
'credit.purpose', 'savings', 'employment.duration', 'installment.rate',
'marital.status', 'guarantor', 'residence.duration', 'current.assets',
'other.credits', 'apartment.type', 'bank.credits', 'occupation',
'dependents', 'telephone', 'foreign.worker')
# transformarea datelor
credit.dataset <- to.factors(dataset=credit.dataset,variables = categorical.vars)
str(credit.dataset)
# install.packages(c("pastecs","gmodels","gridExtra","ggplot2", "car"))
library(pastecs)
library(gmodels)
library(gridExtra)
library(ggplot2)
# analizarea variabilelor numerice
get.numeric.variable.stats <- function(indep.var, detailed=FALSE){
options(scipen=100)
options(digits=2)
if (detailed){
var.stats <- stat.desc(indep.var)
}else{
var.stats <- summary(indep.var)
}
dataset <- data.frame(round(as.numeric(var.stats),2))
colnames(dataset) <- deparse(substitute(indep.var))
rownames(dataset) <- names(var.stats)
if (names(dev.cur()) != "null device"){
dev.off()
}
grid.table(t(dataset))
}
# vizualizare
# histograms\density
visualize.distribution <- function(indep.var){
pl1 <- qplot(indep.var, geom="histogram",
fill=I('gray'), binwidth=5,
col=I('black'))+ theme_bw()
pl2 <- qplot(indep.var, geom="density",
fill=I('gray'), binwidth=5,
col=I('black'))+ theme_bw()
grid.arrange(pl1,pl2, ncol=2)
}
# box plots
visualize.boxplot <- function(indep.var, dep.var){
pl1 <- qplot(factor(0),indep.var, geom="boxplot",
xlab = deparse(substitute(indep.var)),
ylab="values") + theme_bw()
pl2 <- qplot(dep.var,indep.var,geom="boxplot",
xlab = deparse(substitute(dep.var)),
ylab = deparse(substitute(indep.var))) + theme_bw()
grid.arrange(pl1,pl2, ncol=2)
}
# analizarea variabilelor categorice
get.categorical.variable.stats <- function(indep.var){
feature.name = deparse(substitute(indep.var))
dataframe1 <- data.frame(table(indep.var))
colnames(dataframe1) <- c(feature.name, "Frequency")
dataframe2 <- data.frame(prop.table(table(indep.var)))
colnames(dataframe2) <- c(feature.name, "Proportion")
dataset <- merge(
dataframe1, dataframe2, by = feature.name
)
ndf <- dataset[order(-dataset$Frequency),]
if (names(dev.cur()) != "null device"){
dev.off()
}
grid.table(ndf)
}
# generare tabel contingent
get.contingency.table <- function(dep.var, indep.var,
stat.tests=F){
if(stat.tests == F){
CrossTable(dep.var, indep.var, digits=1,
prop.r=F, prop.t=F, prop.chisq=F)
}else{
CrossTable(dep.var, indep.var, digits=1,
prop.r=F, prop.t=F, prop.chisq=F,
chisq=T, fisher=T)
}
}
# vizualizare
# barcharts
visualize.barchart <- function(indep.var){
qplot(indep.var, geom="bar",
fill=I('gray'), col=I('black'),
xlab = deparse(substitute(indep.var))) + theme_bw()
}
# mosaic plots
visualize.contingency.table <- function(dep.var, indep.var){
if (names(dev.cur()) != "null device"){
dev.off()
}
mosaicplot(dep.var ~ indep.var, color=T,
main = "Contingency table plot")
}
## Analizarea dataset-ului
attach(credit.dataset)
get.categorical.variable.stats(credit.rating)
visualize.barchart(credit.rating)
get.categorical.variable.stats(account.balance)
visualize.barchart(account.balance)
library(car)
new.account.balance<- recode(account.balance,"1=1;2=2;3=3;4=3")
credit.dataset$account.balance<- new.account.balance
get.contingency.table(credit.rating,new.account.balance,
stat.tests = T)
visualize.contingency.table(credit.rating,new.account.balance)
get.numeric.variable.stats(credit.duration.months)
visualize.distribution(credit.duration.months)
visualize.boxplot(credit.duration.months,credit.rating)
get.categorical.variable.stats(previous.credit.payment.status)
visualize.barchart(previous.credit.payment.status)
new.previous.credit.payment.status<- recode(previous.credit.payment.status,
"0=1;1=1;2=2;3=3;4=3")
credit.dataset$previous.credit.payment.status<-
new.previous.credit.payment.status
get.contingency.table(credit.rating,new.previous.credit.payment.status)
get.categorical.variable.stats(credit.purpose)
visualize.barchart(credit.purpose)
new.credit.purpose <- recode(credit.purpose,
"0=4;1=1;2=2;3=3;4=3;5=3;6=3;7=4;8=4;9=4;10=4")
credit.dataset$credit.purpose<- new.credit.purpose
get.contingency.table(credit.rating,new.credit.purpose)
get.numeric.variable.stats(credit.amount)
visualize.distribution(credit.amount)
visualize.boxplot(credit.amount,credit.rating)
new.savings<- recode(savings,"1=1;2=2;3=3;4=3;5=4")
credit.dataset$savings<-new.savings
get.contingency.table(credit.rating,new.savings)
# feature: employment.duration - rescrie clase si updateaza data frame-ul
new.employment.duration <- recode(employment.duration,
"1=1;2=1;3=2;4=3;5=4")
credit.dataset$employment.duration <- new.employment.duration
# tabel contingent
get.contingency.table(credit.rating, new.employment.duration)
get.contingency.table(credit.rating,installment.rate,stat.tests = TRUE)
# feature: marital.status - rescrie clase si updateaza data frame-ul
new.marital.status <- recode(marital.status, "1=1;2=1;3=3;4=4")
credit.dataset$marital.status <- new.marital.status
# contingency table
get.contingency.table(credit.rating, new.marital.status)
# feature: guarantor - rescrie clase si updateaza data frame-ul
new.guarantor <- recode(guarantor, "1=1;2=2;3=2")
credit.dataset$guarantor <- new.guarantor
# efectueazÄ testele statistice
fisher.test(credit.rating, new.guarantor)
chisq.test(credit.rating, new.guarantor)
# efectueazÄ testele statistice pentru residence.duration
fisher.test(credit.rating, residence.duration)
chisq.test(credit.rating, residence.duration)
# efectueazÄ testele statistice pentru current.assets
fisher.test(credit.rating, current.assets)
chisq.test(credit.rating, current.assets)
get.numeric.variable.stats(age)
visualize.distribution(age)
visualize.boxplot(age,credit.rating)
# feature: other.credits - rescrie clase si updateaza data frame-ul
new.other.credits <- recode(other.credits, "1=1;2=1;3=2")
credit.dataset$other.credits <- new.other.credits
# efectueazÄ testele statistice
fisher.test(credit.rating, new.other.credits)
chisq.test(credit.rating, new.other.credits)
# efectueazÄ testele statistice pentru apartment.type
fisher.test(credit.rating, apartment.type)
chisq.test(credit.rating, apartment.type)
# feature: bank.credits - rescrie clase si updateaza data frame-ul
new.bank.credits <- recode(bank.credits, "1=1;2=2;3=2;4=2")
credit.dataset$bank.credits <- new.bank.credits
# efectueazÄ testele statistice
fisher.test(credit.rating, new.bank.credits)
chisq.test(credit.rating, new.bank.credits)
# efectueazÄ testele statistice pentru occupation
fisher.test(credit.rating, occupation)
chisq.test(credit.rating, occupation)
# efectueazÄ testele statistice pentru dependents
fisher.test(credit.rating, dependents)
chisq.test(credit.rating, dependents)
# efectueazÄ testele statistice pentru telephone
fisher.test(credit.rating, telephone)
chisq.test(credit.rating, telephone)
# efectueazÄ testele statistice pentru foreign.worker
fisher.test(credit.rating, foreign.worker)
chisq.test(credit.rating, foreign.worker)
write.csv(file='swiss_credit_dataset_final.csv',x=credit.dataset,row.names = F)
#PENTRU A PUTEA FACE LOAD LA SETUL DE DATE VA TREBUI SÄ EXECUÈATI
#CODUL DIN FISIERUL analizaDescriptiva.R
#DUPÄ EXECUTAREA CODULUI SE VA GENERA SETUL DE DATE "swiss_credit_dataset_final.csv"
credit.dataset <- read.csv("swiss_credit_dataset_final.csv")
str(credit.dataset)
# transformarea - factoring a datelor
to.factors <- function(dataset, variables){
for (variable in variables){
dataset[[variable]] <- as.factor(dataset[[variable]])
}
return(dataset)
}
# normalizare
scale.features <- function(dataset, variables){
for (variable in variables){
dataset[[variable]] <- scale(dataset[[variable]], center=T, scale=T)
}
return(dataset)
}
numeric.vars<- c("credit.duration.months","age","credit.amount")
credit.dataset<- scale.features(credit.dataset,numeric.vars)
#selectarea datelor pe care vrem sÄ le transformÄm
categorical.vars <- c('credit.rating', 'account.balance',
'previous.credit.payment.status',
'credit.purpose', 'savings',
'employment.duration', 'installment.rate',
'marital.status', 'guarantor',
'residence.duration', 'current.assets',
'other.credits', 'apartment.type',
'bank.credits', 'occupation',
'dependents', 'telephone', 'foreign.worker')
credit.dataset<- to.factors(dataset=credit.dataset,variables = categorical.vars)
indexes<-sample(1:nrow(credit.dataset),size= 0.6*nrow(credit.dataset))
train.data<-credit.dataset[indexes,]
test.data<- credit.dataset[-indexes,]
## Feature selection
library(caret)
library(randomForest)
run.feature.selection <- function(num.iters=20, feature.vars, class.var){
set.seed(10)
variable.sizes <- 1:10
control <- rfeControl(functions = rfFuncs, method = "cv",
verbose = FALSE, returnResamp = "all",
number = num.iters)
results.rfe <- rfe(x = feature.vars, y = class.var,
sizes = variable.sizes,
rfeControl = control)
return(results.rfe)
}
rfe.results <- run.feature.selection(feature.vars=train.data[,-1],
class.var=train.data[,1])
rfe.results
varImp(rfe.results)
## Modeling using logistic regression
library(caret)
library(ROCR)
source("performance_plot_utils.R")
test.feature.vars<-test.data[,-1]
test.class.var<- test.data[,1]
formula.init<- "credit.rating ~ ."
formula.init<- as.formula(formula.init)
lr.model<- glm(formula = formula.init,data = train.data,
family = "binomial")
# view model details
summary(lr.model)
lr.predictions<- predict(lr.model,test.data, type="response")
lr.predictions<- round(lr.predictions)
u=union(lr.predictions,test.class.var)
confusionMatrix(table(factor(lr.predictions,u),factor(test.class.var,u)))
formula<- "credit.rating ~ ."
formula<-as.formula(formula)
control<-trainControl(method = "repeatedcv", number = 10, repeats = 2)
model<- train(formula, data=train.data, method="glm",trControl=control)
importance<- varImp(model,scale = FALSE)
plot(importance)
# build new model with selected features
formula.new <- "credit.rating ~ account.balance +
credit.purpose + previous.credit.payment.status
+ savings + credit.duration.months"
formula.new<- as.formula(formula.new)
lr.model.new<- glm(formula= formula.new, data=train.data,family = "binomial")
lr.predictions.new <- predict(lr.model.new, test.data, type="response")
lr.predictions.new <- round(lr.predictions.new)
u= union(lr.predictions.new,test.class.var)
confusionMatrix(table(factor(lr.predictions.new, u),
factor(test.class.var, u)))
lr.model.best <- lr.model
lr.prediction.values <- predict(lr.model.best, test.feature.vars,
type="response")
predictions <- prediction(lr.prediction.values, test.class.var)
par(mfrow=c(1,2))
plot.roc.curve(predictions, title.text="LR ROC Curve")
plot.pr.curve(predictions, title.text="LR Precision/Recall Curve")
auc<- performance(predictions,"auc")
auc<- unlist(slot(auc,"y.values"))
auc<- round(auc,4)
auc
library(rpart)# tree models
library(caret) # feature selection
library(rpart.plot) # plot dtree
library(ROCR) # model evaluation
library(e1071) # tuning model
source("performance_plot_utils.R") # plotting curves
## separate feature and class variables
test.feature.vars <- test.data[,-1]
test.class.var <- test.data[,1]
formula.init <- "credit.rating ~ ."
formula.init <- as.formula(formula.init)
dataset.model <- rpart(formula=formula.init, method="class",data=train.data,
control = rpart.control(minsplit=20, cp=0.05))
dataset.predictions <- predict(dataset.model, test.feature.vars, type="class")
u= union(dataset.predictions,test.class.var)
confusionMatrix(table(factor(dataset.predictions, u),
factor(test.class.var, u)))
## dataset specific feature selection
formula.init <- "credit.rating ~ ."
formula.init <- as.formula(formula.init)
control <- trainControl(method="repeatedcv", number=10, repeats=2)
model <- train(formula.init, data=train.data, method="rpart",
trControl=control)
importance <- varImp(model, scale=FALSE)
plot(importance, cex.lab=0.5)
formula.new <- "credit.rating ~ account.balance + savings +
credit.amount + credit.duration.months +
previous.credit.payment.status"
formula.new <- as.formula(formula.new)
dataset.model.new <- rpart(formula=formula.new, method="class",
data=train.data,
control = rpart.control(minsplit=20, cp=0.05),
parms = list(prior = c(0.7, 0.3)))
dataset.predictions.new <- predict(dataset.model.new, test.feature.vars,
type="class")
u= union(dt.predictions.new ,test.class.var)
confusionMatrix(table(factor(dataset.predictions.new, u),
factor(test.class.var, u)))
## view model
dataset.model.best <- dataset.model.new
print(dataset.model.best)
## visualize the tree
par(mfrow=c(1,1))
prp(dt.model.best, type=1, extra=3, varlen=0, faclen=0)
## predictions
dataset.predictions.best <- predict(dataset.model.best, test.feature.vars,
type="prob")
dataset.prediction.values <- dataset.predictions.best[,2]
predictions <- prediction(dataset.prediction.values, test.class.var)
par(mfrow=c(1,2))
plot.roc.curve(predictions, title.text="DT ROC Curve")
plot.pr.curve(predictions, title.text="DT Precision/Recall Curve")
## calculate the auc value
auc<- performance(predictions,"auc")
auc<- unlist(slot(auc,"y.values"))
auc<- round(auc,4)
auc
library(caret)
library(randomForest)
run.feature.selection <- function(num.iters=20, feature.vars, class.var){
set.seed(10)
variable.sizes <- 1:10
control <- rfeControl(functions = rfFuncs, method = "cv",
verbose = FALSE, returnResamp = "all",
number = num.iters)
results.rfe <- rfe(x = feature.vars, y = class.var,
sizes = variable.sizes,
rfeControl = control)
return(results.rfe)
}
rfe.results <- run.feature.selection(feature.vars=train.data[,-1],
class.var=train.data[,1])
rfe.results
varImp(rfe.results)
library(caret)
library(ROCR)
source("performance_plot_utils.R")
test.feature.vars<-test.data[,-1]
test.class.var<- test.data[,1]
formula.init<- "credit.rating ~ ."
formula.init<- as.formula(formula.init)
lr.model<- glm(formula = formula.init,data = train.data,
family = "binomial")
# view model details
summary(lr.model)
lr.predictions<- predict(lr.model,test.data, type="response")
lr.predictions<- round(lr.predictions)
u=union(lr.predictions,test.class.var)
confusionMatrix(table(factor(lr.predictions,u),factor(test.class.var,u)))
formula<- "credit.rating ~ ."
formula<-as.formula(formula)
control<-trainControl(method = "repeatedcv", number = 10, repeats = 2)
model<- train(formula, data=train.data, method="glm",trControl=control)
importance<- varImp(model,scale = FALSE)
plot(importance)
library(rpart)# tree models
library(caret) # feature selection
library(rpart.plot) # plot dtree
library(ROCR) # model evaluation
library(e1071) # tuning model
source("performance_plot_utils.R") # plotting curves
## separate feature and class variables
test.feature.vars <- test.data[,-1]
test.class.var <- test.data[,1]
formula.init <- "credit.rating ~ ."
formula.init <- as.formula(formula.init)
dataset.model <- rpart(formula=formula.init, method="class",data=train.data,
control = rpart.control(minsplit=20, cp=0.05))
dataset.predictions <- predict(dataset.model, test.feature.vars, type="class")
u= union(dataset.predictions,test.class.var)
confusionMatrix(table(factor(dataset.predictions, u),
factor(test.class.var, u)))
formula.init <- "credit.rating ~ ."
formula.init <- as.formula(formula.init)
control <- trainControl(method="repeatedcv", number=10, repeats=2)
model <- train(formula.init, data=train.data, method="rpart",
trControl=control)
importance <- varImp(model, scale=FALSE)
plot(importance, cex.lab=0.5)
formula.new <- "credit.rating ~ account.balance + savings +
credit.amount + credit.duration.months +
credit.dataset <- read.csv("swiss_credit_dataset_final.csv")
str(credit.dataset)
# transformarea - factoring a datelor
to.factors <- function(dataset, variables){
for (variable in variables){
dataset[[variable]] <- as.factor(dataset[[variable]])
}
return(dataset)
}
# normalizare
scale.features <- function(dataset, variables){
for (variable in variables){
dataset[[variable]] <- scale(dataset[[variable]], center=T, scale=T)
}
return(dataset)
}
numeric.vars<- c("credit.duration.months","age","credit.amount")
credit.dataset<- scale.features(credit.dataset,numeric.vars)
numeric.vars<- c("credit.duration.months","age","credit.amount")
credit.dataset<- scale.features(credit.dataset,numeric.vars)
#selectarea datelor pe care vrem sÄ le transformÄm
categorical.vars <- c('credit.rating', 'account.balance',
'previous.credit.payment.status',
'credit.purpose', 'savings',
'employment.duration', 'installment.rate',
'marital.status', 'guarantor',
'residence.duration', 'current.assets',
'other.credits', 'apartment.type',
'bank.credits', 'occupation',
'dependents', 'telephone', 'foreign.worker')
credit.dataset<- to.factors(dataset=credit.dataset,variables = categorical.vars)
indexes<-sample(1:nrow(credit.dataset),size= 0.6*nrow(credit.dataset))
train.data<-credit.dataset[indexes,]
test.data<- credit.dataset[-indexes,]
